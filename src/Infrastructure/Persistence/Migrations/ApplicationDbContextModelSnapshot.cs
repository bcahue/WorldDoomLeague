// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldDoomLeague.Infrastructure.Persistence;

namespace WorldDoomLeague.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Demos", b =>
                {
                    b.Property<uint>("DemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("demo_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkGameId")
                        .HasColumnName("fk_game_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkPlayerId")
                        .HasColumnName("fk_player_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("IsUploaded")
                        .HasColumnName("is_uploaded")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("PlayerLostDemo")
                        .HasColumnName("player_lost_demo")
                        .HasColumnType("tinyint(1) unsigned");

                    b.HasKey("DemoId")
                        .HasName("PRIMARY");

                    b.HasIndex("DemoId")
                        .IsUnique()
                        .HasName("demo_id_UNIQUE");

                    b.HasIndex("FkGameId")
                        .HasName("fk_demo_game_idx");

                    b.HasIndex("FkPlayerId")
                        .HasName("fk_demo_player_idx");

                    b.ToTable("demos");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GameFiles", b =>
                {
                    b.Property<uint>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_file")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<uint>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnName("upload_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("IdFile")
                        .HasName("PRIMARY");

                    b.HasIndex("IdFile")
                        .IsUnique()
                        .HasName("id_file_UNIQUE");

                    b.ToTable("files");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GamePlayers", b =>
                {
                    b.Property<uint>("IdGameplayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_gameplayer")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("DemoFilePath")
                        .HasColumnName("demo_file_path")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("DemoNotTaken")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("demo_not_taken")
                        .HasColumnType("enum('y','n')")
                        .HasDefaultValueSql("'n'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<uint>("FkIdGame")
                        .HasColumnName("fk_id_game")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdMap")
                        .HasColumnName("fk_id_map")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnName("fk_id_player")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnName("fk_id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnName("fk_id_team")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnName("fk_id_week")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint?>("MapsIdMap")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("IdGameplayer")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasName("fk_stats_GamePlayers_Games_idx");

                    b.HasIndex("FkIdMap")
                        .HasName("fk_stats_GamePlayers_Map_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasName("fk_stats_GamePlayers_Players_idx");

                    b.HasIndex("FkIdSeason")
                        .HasName("fk_stats_GamePlayers_Seasons_idx");

                    b.HasIndex("FkIdTeam")
                        .HasName("fk_stats_GamePlayers_Teams_idx");

                    b.HasIndex("FkIdWeek")
                        .HasName("fk_stats_GamePlayers_Weeks_idx");

                    b.HasIndex("IdGameplayer")
                        .IsUnique()
                        .HasName("id_gameplayer_UNIQUE");

                    b.HasIndex("MapsIdMap");

                    b.ToTable("gameplayers");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GameTeamStats", b =>
                {
                    b.Property<uint>("IdGameteamstats")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_gameteamstats")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CapturesAgainst")
                        .HasColumnName("captures_against")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CapturesFor")
                        .HasColumnName("captures_for")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdGame")
                        .HasColumnName("fk_id_game")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdMap")
                        .HasColumnName("fk_id_map")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnName("fk_id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnName("fk_id_team")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnName("fk_id_week")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Loss")
                        .HasColumnName("loss")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("NumberRoundsPlayed")
                        .HasColumnName("number_rounds_played")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("NumberTicsPlayed")
                        .HasColumnName("number_tics_played")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Points")
                        .HasColumnName("points")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("TeamColor")
                        .IsRequired()
                        .HasColumnName("team_color")
                        .HasColumnType("enum('r','b')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<uint>("Tie")
                        .HasColumnName("tie")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalAssists")
                        .HasColumnName("total_assists")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCaptures")
                        .HasColumnName("total_captures")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCarrierDamage")
                        .HasColumnName("total_carrier_damage")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCarrierKills")
                        .HasColumnName("total_carrier_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDamage")
                        .HasColumnName("total_damage")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDamageWithFlag")
                        .HasColumnName("total_damage_with_flag")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDeaths")
                        .HasColumnName("total_deaths")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalEnvironmentDeaths")
                        .HasColumnName("total_environment_deaths")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalFlagReturns")
                        .HasColumnName("total_flag_returns")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalKills")
                        .HasColumnName("total_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiDoubleKills")
                        .HasColumnName("total_multi_double_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiMonsterKills")
                        .HasColumnName("total_multi_monster_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiMultiKills")
                        .HasColumnName("total_multi_multi_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiUltraKills")
                        .HasColumnName("total_multi_ultra_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPickupCaptures")
                        .HasColumnName("total_pickup_captures")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPickupTouches")
                        .HasColumnName("total_pickup_touches")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPowerPickups")
                        .HasColumnName("total_power_pickups")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeDominations")
                        .HasColumnName("total_spree_dominations")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeGodlikes")
                        .HasColumnName("total_spree_godlikes")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeKillingSprees")
                        .HasColumnName("total_spree_killing_sprees")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeRampages")
                        .HasColumnName("total_spree_rampages")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeUnstoppables")
                        .HasColumnName("total_spree_unstoppables")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeWickedsicks")
                        .HasColumnName("total_spree_wickedsicks")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalTouches")
                        .HasColumnName("total_touches")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Win")
                        .HasColumnName("win")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("IdGameteamstats")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasName("fk_stats_GameTeamStats_Games_idx");

                    b.HasIndex("FkIdMap")
                        .HasName("fk_stats_GameTeamStats_Maps_idx");

                    b.HasIndex("FkIdSeason")
                        .HasName("fk_stats_GameTeamStats_Seasons_idx");

                    b.HasIndex("FkIdTeam")
                        .HasName("fk_stats_GameTeamStats_Teams_idx");

                    b.HasIndex("FkIdWeek")
                        .HasName("fk_stats_GameTeamStats_Weeks_idx");

                    b.HasIndex("IdGameteamstats")
                        .IsUnique()
                        .HasName("id_gameteamstats_UNIQUE");

                    b.ToTable("gameteamstats");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Games", b =>
                {
                    b.Property<uint>("IdGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_game")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdMap")
                        .HasColumnName("fk_id_map")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnName("fk_id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdTeamBlue")
                        .HasColumnName("fk_id_team_blue")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint?>("FkIdTeamForfeit")
                        .HasColumnName("fk_id_team_forfeit")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdTeamRed")
                        .HasColumnName("fk_id_team_red")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint?>("FkIdTeamWinner")
                        .HasColumnName("fk_id_team_winner")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnName("fk_id_week")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime?>("GameDatetime")
                        .HasColumnName("game_datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnName("game_type")
                        .HasColumnType("enum('n','p','f')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("TeamForfeitColor")
                        .HasColumnName("team_forfeit_color")
                        .HasColumnType("enum('r','b')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("TeamWinnerColor")
                        .HasColumnName("team_winner_color")
                        .HasColumnType("enum('r','b','t')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("IdGame")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdMap")
                        .HasName("fk_stats_Games_Map_idx");

                    b.HasIndex("FkIdSeason")
                        .HasName("fk_stats_Games_Seasons_idx");

                    b.HasIndex("FkIdTeamBlue")
                        .HasName("fk_stats_Games_Teams_blue_idx");

                    b.HasIndex("FkIdTeamRed")
                        .HasName("fk_stats_Games_Teams_red_idx");

                    b.HasIndex("FkIdWeek")
                        .HasName("fk_stats_Games_Weeks_idx");

                    b.HasIndex("IdGame")
                        .IsUnique()
                        .HasName("id_games_UNIQUE");

                    b.ToTable("games");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Maps", b =>
                {
                    b.Property<uint>("IdMap")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_map")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdFile")
                        .HasColumnName("fk_id_file")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnName("map_name")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<uint>("MapNumber")
                        .HasColumnName("map_number")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("MapPack")
                        .IsRequired()
                        .HasColumnName("map_pack")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("IdMap")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdFile")
                        .HasName("fk_stats_Maps_Files_idx");

                    b.HasIndex("IdMap")
                        .IsUnique()
                        .HasName("id_map_UNIQUE");

                    b.ToTable("maps");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Player", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FdbkIdMember")
                        .HasColumnName("fdbk_id_member")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("PlayerAlias")
                        .HasColumnName("player_alias")
                        .HasColumnType("varchar(32)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnName("player_name")
                        .HasColumnType("varchar(32)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("FdbkIdMember")
                        .IsUnique()
                        .HasName("fdbk_id_member");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_player_UNIQUE");

                    b.HasIndex("PlayerName")
                        .IsUnique()
                        .HasName("player_name_UNIQUE");

                    b.ToTable("players");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.RoundFlagTouchCaptures", b =>
                {
                    b.Property<uint>("IdRoundflagtouchcapture")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_roundflagtouchcapture")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CaptureNumber")
                        .HasColumnName("capture_number")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdGame")
                        .HasColumnName("fk_id_game")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnName("fk_id_player")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnName("fk_id_team")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Gametic")
                        .HasColumnName("gametic")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnName("team")
                        .HasColumnType("enum('r','b')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("IdRoundflagtouchcapture")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasName("fk_stats_RoundFlagTouchCaptures_game_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasName("fk_stats_RoundFlagTouchCaptures_player_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_stats_RoundFlagTouchCaptures_round_idx");

                    b.HasIndex("FkIdTeam")
                        .HasName("fk_stats_RoundFlagTouchCaptures_team_idx");

                    b.HasIndex("IdRoundflagtouchcapture")
                        .IsUnique()
                        .HasName("id_roundflagtouchcapture_UNIQUE");

                    b.ToTable("roundflagtouchcaptures");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.RoundPlayers", b =>
                {
                    b.Property<uint>("IdRoundplayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_roundplayer")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnName("fk_id_player")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("RoundTicsDuration")
                        .HasColumnName("round_tics_duration")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("IdRoundplayer")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayer")
                        .HasName("fk_stats_RoundPlayers_Players_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_stats_RoundPlayers_Rounds_idx");

                    b.HasIndex("IdRoundplayer")
                        .IsUnique()
                        .HasName("id_roundplayer_UNIQUE");

                    b.HasIndex("RoundTicsDuration")
                        .HasName("fk_stats_RoundPlayers_Teams_idx");

                    b.ToTable("roundplayers");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Rounds", b =>
                {
                    b.Property<uint>("IdRound")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdGame")
                        .HasColumnName("fk_id_game")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdMap")
                        .HasColumnName("fk_id_map")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnName("fk_id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnName("fk_id_week")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime?>("RoundDatetime")
                        .HasColumnName("round_datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("RoundNumber")
                        .HasColumnName("round_number")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ushort?>("RoundParseVersion")
                        .HasColumnName("round_parse_version")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint?>("RoundTicsDuration")
                        .HasColumnName("round_tics_duration")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("RoundWinner")
                        .HasColumnName("round_winner")
                        .HasColumnType("enum('r','b','t')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("IdRound")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasName("fk_stats_Rounds_Games_idx");

                    b.HasIndex("FkIdMap")
                        .HasName("fk_stats_Rounds_Maps_idx");

                    b.HasIndex("FkIdSeason")
                        .HasName("fk_stats_Rounds_Seasons_idx");

                    b.HasIndex("FkIdWeek")
                        .HasName("fk_stats_Rounds_Weeks_idx");

                    b.HasIndex("IdRound")
                        .IsUnique()
                        .HasName("id_round_UNIQUE");

                    b.ToTable("rounds");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Seasons", b =>
                {
                    b.Property<uint>("IdSeason")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("date");

                    b.Property<int?>("FkIdTeamWinner")
                        .HasColumnName("fk_id_team_winner")
                        .HasColumnType("int(11)");

                    b.Property<uint>("FkIdWadFile")
                        .HasColumnName("fk_id_wad_file")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasColumnName("season_name")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("IdSeason")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdWadFile")
                        .HasName("fk_stats_Seasons_WadFile_idx");

                    b.HasIndex("IdSeason")
                        .IsUnique()
                        .HasName("id_season_UNIQUE");

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsAccuracyData", b =>
                {
                    b.Property<uint>("IdStatsAccuracyData")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_stats_accuracy_data")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnName("fk_id_player_attacker")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnName("fk_id_player_target")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<double>("HitMissRatio")
                        .HasColumnName("hit_miss_ratio")
                        .HasColumnType("double unsigned");

                    b.Property<double>("PinpointPercent")
                        .HasColumnName("pinpoint_percent")
                        .HasColumnType("double unsigned");

                    b.Property<double>("SpritePercent")
                        .HasColumnName("sprite_percent")
                        .HasColumnType("double unsigned");

                    b.Property<byte>("WeaponType")
                        .HasColumnName("weapon_type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("IdStatsAccuracyData")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasName("fk_stataccuracy_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasName("fk_stataccuracy_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_stataccuracy_round_idx");

                    b.HasIndex("IdStatsAccuracyData")
                        .IsUnique()
                        .HasName("id_stats_accuracy_data_UNIQUE");

                    b.ToTable("statsaccuracydata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsAccuracyFlagOutData", b =>
                {
                    b.Property<uint>("IdStatsAccuracyFlagoutData")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_stats_accuracy_flagout_data")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnName("fk_id_player_attacker")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnName("fk_id_player_target")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<double>("HitMissRatio")
                        .HasColumnName("hit_miss_ratio")
                        .HasColumnType("double unsigned");

                    b.Property<double>("PinpointPercent")
                        .HasColumnName("pinpoint_percent")
                        .HasColumnType("double unsigned");

                    b.Property<double>("SpritePercent")
                        .HasColumnName("sprite_percent")
                        .HasColumnType("double unsigned");

                    b.Property<byte>("WeaponType")
                        .HasColumnName("weapon_type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("IdStatsAccuracyFlagoutData")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasName("fk_stataccuracy_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasName("fk_stataccuracy_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_stataccuracy_round_idx");

                    b.HasIndex("IdStatsAccuracyFlagoutData")
                        .IsUnique()
                        .HasName("id_stats_accuracy_data_UNIQUE");

                    b.ToTable("statsaccuracyflagoutdata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsDamageCarrierData", b =>
                {
                    b.Property<uint>("IdStatsCarrierDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_stats_carrier_damage")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DamageBlueArmor")
                        .HasColumnName("damage_blue_armor")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DamageGreenArmor")
                        .HasColumnName("damage_green_armor")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DamageHealth")
                        .HasColumnName("damage_health")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnName("fk_id_player_attacker")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnName("fk_id_player_target")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("WeaponType")
                        .HasColumnName("weapon_type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("IdStatsCarrierDamage")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasName("fk_statsdamage_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasName("fk_statsdamage_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_statsdamage_round_idx");

                    b.HasIndex("IdStatsCarrierDamage")
                        .IsUnique()
                        .HasName("id_stats_damage_UNIQUE");

                    b.ToTable("statsdamagecarrierdata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsDamageData", b =>
                {
                    b.Property<uint>("IdStatsDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_stats_damage")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DamageBlueArmor")
                        .HasColumnName("damage_blue_armor")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DamageGreenArmor")
                        .HasColumnName("damage_green_armor")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DamageHealth")
                        .HasColumnName("damage_health")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnName("fk_id_player_attacker")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnName("fk_id_player_target")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("WeaponType")
                        .HasColumnName("weapon_type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("IdStatsDamage")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasName("fk_statsdamage_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasName("fk_statsdamage_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_statsdamage_round_idx");

                    b.HasIndex("IdStatsDamage")
                        .IsUnique()
                        .HasName("id_stats_damage_UNIQUE");

                    b.ToTable("statsdamagedata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsKillCarrierData", b =>
                {
                    b.Property<uint>("IdStatsKillcarrier")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_stats_killcarrier")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnName("fk_id_player_attacker")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnName("fk_id_player_target")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalKills")
                        .HasColumnName("total_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("WeaponType")
                        .HasColumnName("weapon_type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("IdStatsKillcarrier")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasName("fk_statsdamage_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasName("fk_statsdamage_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_statsdamage_round_idx");

                    b.HasIndex("IdStatsKillcarrier")
                        .IsUnique()
                        .HasName("id_stats_damage_UNIQUE");

                    b.ToTable("statskillcarrierdata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsKillData", b =>
                {
                    b.Property<uint>("IdStatsKill")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_stats_kill")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnName("fk_id_player_attacker")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnName("fk_id_player_target")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalKills")
                        .HasColumnName("total_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("WeaponType")
                        .HasColumnName("weapon_type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("IdStatsKill")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasName("fk_statsdamage_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasName("fk_statsdamage_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_statsdamage_round_idx");

                    b.HasIndex("IdStatsKill")
                        .IsUnique()
                        .HasName("id_stats_damage_UNIQUE");

                    b.ToTable("statskilldata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsOverall", b =>
                {
                    b.Property<uint>("IdOverallStats")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_overall_stats")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnName("fk_id_player")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("NumberRoundsPlayed")
                        .HasColumnName("number_rounds_played")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("NumberTicsPlayed")
                        .HasColumnName("number_tics_played")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalAssists")
                        .HasColumnName("total_assists")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCaptures")
                        .HasColumnName("total_captures")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCarrierDamage")
                        .HasColumnName("total_carrier_damage")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCarrierKills")
                        .HasColumnName("total_carrier_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDamage")
                        .HasColumnName("total_damage")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDamageWithFlag")
                        .HasColumnName("total_damage_with_flag")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDeaths")
                        .HasColumnName("total_deaths")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalEnvironmentDeaths")
                        .HasColumnName("total_environment_deaths")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalFlagReturns")
                        .HasColumnName("total_flag_returns")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalKills")
                        .HasColumnName("total_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiDoubleKills")
                        .HasColumnName("total_multi_double_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiMonsterKills")
                        .HasColumnName("total_multi_monster_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiMultiKills")
                        .HasColumnName("total_multi_multi_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiUltraKills")
                        .HasColumnName("total_multi_ultra_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPickupCaptures")
                        .HasColumnName("total_pickup_captures")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPickupTouches")
                        .HasColumnName("total_pickup_touches")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPowerPickups")
                        .HasColumnName("total_power_pickups")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeDominations")
                        .HasColumnName("total_spree_dominations")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeGodlikes")
                        .HasColumnName("total_spree_godlikes")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeKillingSprees")
                        .HasColumnName("total_spree_killing_sprees")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeRampages")
                        .HasColumnName("total_spree_rampages")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeUnstoppables")
                        .HasColumnName("total_spree_unstoppables")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeWickedsicks")
                        .HasColumnName("total_spree_wickedsicks")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalTouches")
                        .HasColumnName("total_touches")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("IdOverallStats")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayer")
                        .IsUnique()
                        .HasName("fk_id_player");

                    b.ToTable("statsoverall");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsOverallSeason", b =>
                {
                    b.Property<uint>("IdOverallStatsSeason")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_overall_stats_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnName("fk_id_player")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnName("fk_id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("NumberRoundsPlayed")
                        .HasColumnName("number_rounds_played")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("NumberTicsPlayed")
                        .HasColumnName("number_tics_played")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalAssists")
                        .HasColumnName("total_assists")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCaptures")
                        .HasColumnName("total_captures")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCarrierDamage")
                        .HasColumnName("total_carrier_damage")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalCarrierKills")
                        .HasColumnName("total_carrier_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDamage")
                        .HasColumnName("total_damage")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDamageWithFlag")
                        .HasColumnName("total_damage_with_flag")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalDeaths")
                        .HasColumnName("total_deaths")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalEnvironmentDeaths")
                        .HasColumnName("total_environment_deaths")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalFlagReturns")
                        .HasColumnName("total_flag_returns")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalKills")
                        .HasColumnName("total_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiDoubleKills")
                        .HasColumnName("total_multi_double_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiMonsterKills")
                        .HasColumnName("total_multi_monster_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiMultiKills")
                        .HasColumnName("total_multi_multi_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalMultiUltraKills")
                        .HasColumnName("total_multi_ultra_kills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPickupCaptures")
                        .HasColumnName("total_pickup_captures")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPickupTouches")
                        .HasColumnName("total_pickup_touches")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalPowerPickups")
                        .HasColumnName("total_power_pickups")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeDominations")
                        .HasColumnName("total_spree_dominations")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeGodlikes")
                        .HasColumnName("total_spree_godlikes")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeKillingSprees")
                        .HasColumnName("total_spree_killing_sprees")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeRampages")
                        .HasColumnName("total_spree_rampages")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeUnstoppables")
                        .HasColumnName("total_spree_unstoppables")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalSpreeWickedsicks")
                        .HasColumnName("total_spree_wickedsicks")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TotalTouches")
                        .HasColumnName("total_touches")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("IdOverallStatsSeason")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayer")
                        .HasName("fk_seasonstats_players_idx");

                    b.HasIndex("FkIdSeason")
                        .HasName("fk_seasonstats_season_idx");

                    b.ToTable("statsoverallseason");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsPickupData", b =>
                {
                    b.Property<uint>("IdStatPickup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_stat_pickup")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdActivatorPlayer")
                        .HasColumnName("fk_id_activator_player")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("PickupAmount")
                        .HasColumnName("pickup_amount")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("PickupType")
                        .HasColumnName("pickup_type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("IdStatPickup")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdActivatorPlayer")
                        .HasName("fk_statpickup_player_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_statpickup_round_idx");

                    b.HasIndex("IdStatPickup")
                        .IsUnique()
                        .HasName("id_stat_pickup_UNIQUE");

                    b.ToTable("statspickupdata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsRounds", b =>
                {
                    b.Property<uint>("IdStatsRound")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_stats_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("AccuracyCompleteHits")
                        .HasColumnName("accuracy_complete_hits")
                        .HasColumnType("int(10)");

                    b.Property<int>("AccuracyCompleteMisses")
                        .HasColumnName("accuracy_complete_misses")
                        .HasColumnType("int(11)");

                    b.Property<int>("AmountTeamKills")
                        .HasColumnName("amount_team_kills")
                        .HasColumnType("int(11)");

                    b.Property<double?>("CaptureBlueArmorAverage")
                        .HasColumnName("capture_blue_armor_average")
                        .HasColumnType("double");

                    b.Property<int?>("CaptureBlueArmorMax")
                        .HasColumnName("capture_blue_armor_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("CaptureBlueArmorMin")
                        .HasColumnName("capture_blue_armor_min")
                        .HasColumnType("int(11)");

                    b.Property<double?>("CaptureGreenArmorAverage")
                        .HasColumnName("capture_green_armor_average")
                        .HasColumnType("double");

                    b.Property<int?>("CaptureGreenArmorMax")
                        .HasColumnName("capture_green_armor_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("CaptureGreenArmorMin")
                        .HasColumnName("capture_green_armor_min")
                        .HasColumnType("int(11)");

                    b.Property<double?>("CaptureHealthAverage")
                        .HasColumnName("capture_health_average")
                        .HasColumnType("double");

                    b.Property<int?>("CaptureHealthMax")
                        .HasColumnName("capture_health_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("CaptureHealthMin")
                        .HasColumnName("capture_health_min")
                        .HasColumnType("int(11)");

                    b.Property<double?>("CaptureTicsAverage")
                        .HasColumnName("capture_tics_average")
                        .HasColumnType("double");

                    b.Property<int?>("CaptureTicsMax")
                        .HasColumnName("capture_tics_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("CaptureTicsMin")
                        .HasColumnName("capture_tics_min")
                        .HasColumnType("int(11)");

                    b.Property<int>("CaptureWithSuperPickups")
                        .HasColumnName("capture_with_super_pickups")
                        .HasColumnType("int(11)");

                    b.Property<int>("CarriersKilledWhileHoldingFlag")
                        .HasColumnName("carriers_killed_while_holding_flag")
                        .HasColumnType("int(11)");

                    b.Property<int?>("DamageOutputBetweenTouchCaptureAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_output_between_touch_capture_average")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("DamageOutputBetweenTouchCaptureMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_output_between_touch_capture_max")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("EfficiencyPoints")
                        .HasColumnName("efficiency_points")
                        .HasColumnType("int(11)");

                    b.Property<uint>("FkIdGame")
                        .HasColumnName("fk_id_game")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdMap")
                        .HasColumnName("fk_id_map")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnName("fk_id_player")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdRound")
                        .HasColumnName("fk_id_round")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnName("fk_id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnName("fk_id_team")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnName("fk_id_week")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("HealthFromNonpowerPickups")
                        .HasColumnName("health_from_nonpower_pickups")
                        .HasColumnType("int(11)");

                    b.Property<int>("HighestKillsBeforeCapturing")
                        .HasColumnName("highest_kills_before_capturing")
                        .HasColumnType("int(11)");

                    b.Property<int>("HighestMultiFrags")
                        .HasColumnName("highest_multi_frags")
                        .HasColumnType("int(11)");

                    b.Property<int>("LongestSpree")
                        .HasColumnName("longest_spree")
                        .HasColumnType("int(11)");

                    b.Property<int>("MultiDoubleKills")
                        .HasColumnName("multi_double_kills")
                        .HasColumnType("int(11)");

                    b.Property<int>("MultiMonsterKills")
                        .HasColumnName("multi_monster_kills")
                        .HasColumnType("int(11)");

                    b.Property<int>("MultiMultiKills")
                        .HasColumnName("multi_multi_kills")
                        .HasColumnType("int(11)");

                    b.Property<int>("MultiUltraKills")
                        .HasColumnName("multi_ultra_kills")
                        .HasColumnType("int(11)");

                    b.Property<double?>("PickupCaptureTicsAverage")
                        .HasColumnName("pickup_capture_tics_average")
                        .HasColumnType("double");

                    b.Property<int?>("PickupCaptureTicsMax")
                        .HasColumnName("pickup_capture_tics_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("PickupCaptureTicsMin")
                        .HasColumnName("pickup_capture_tics_min")
                        .HasColumnType("int(11)");

                    b.Property<int>("PickupHealthGained")
                        .HasColumnName("pickup_health_gained")
                        .HasColumnType("int(11)");

                    b.Property<int>("SpreeDominations")
                        .HasColumnName("spree_dominations")
                        .HasColumnType("int(11)");

                    b.Property<int>("SpreeGodlikes")
                        .HasColumnName("spree_godlikes")
                        .HasColumnType("int(11)");

                    b.Property<int>("SpreeKillingSprees")
                        .HasColumnName("spree_killing_sprees")
                        .HasColumnType("int(11)");

                    b.Property<int>("SpreeRampage")
                        .HasColumnName("spree_rampage")
                        .HasColumnType("int(11)");

                    b.Property<int>("SpreeUnstoppables")
                        .HasColumnName("spree_unstoppables")
                        .HasColumnType("int(11)");

                    b.Property<int>("SpreeWickedsicks")
                        .HasColumnName("spree_wickedsicks")
                        .HasColumnType("int(11)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnName("team")
                        .HasColumnType("enum('r','b')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("TotalAssists")
                        .HasColumnName("total_assists")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalCaptures")
                        .HasColumnName("total_captures")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalCarrierKills")
                        .HasColumnName("total_carrier_kills")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalDamage")
                        .HasColumnName("total_damage")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalDamageBlueArmor")
                        .HasColumnName("total_damage_blue_armor")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalDamageCarrierTakenEnvironment")
                        .HasColumnName("total_damage_carrier_taken_environment")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalDamageFlagCarrier")
                        .HasColumnName("total_damage_flag_carrier")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalDamageGreenArmor")
                        .HasColumnName("total_damage_green_armor")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalDamageTakenEnvironment")
                        .HasColumnName("total_damage_taken_environment")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalDamageWithFlag")
                        .HasColumnName("total_damage_with_flag")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalDeaths")
                        .HasColumnName("total_deaths")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalEnvironmentCarrierDeaths")
                        .HasColumnName("total_environment_carrier_deaths")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalEnvironmentDeaths")
                        .HasColumnName("total_environment_deaths")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalFlagReturns")
                        .HasColumnName("total_flag_returns")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalKills")
                        .HasColumnName("total_kills")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalPickupCaptures")
                        .HasColumnName("total_pickup_captures")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalPickupTouches")
                        .HasColumnName("total_pickup_touches")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalPowerPickups")
                        .HasColumnName("total_power_pickups")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalTouches")
                        .HasColumnName("total_touches")
                        .HasColumnType("int(11)");

                    b.Property<double?>("TouchBlueArmorAverage")
                        .HasColumnName("touch_blue_armor_average")
                        .HasColumnType("double");

                    b.Property<int?>("TouchBlueArmorMax")
                        .HasColumnName("touch_blue_armor_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TouchBlueArmorMin")
                        .HasColumnName("touch_blue_armor_min")
                        .HasColumnType("int(11)");

                    b.Property<double?>("TouchGreenArmorAverage")
                        .HasColumnName("touch_green_armor_average")
                        .HasColumnType("double");

                    b.Property<int?>("TouchGreenArmorMax")
                        .HasColumnName("touch_green_armor_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TouchGreenArmorMin")
                        .HasColumnName("touch_green_armor_min")
                        .HasColumnType("int(11)");

                    b.Property<double?>("TouchHealthAverage")
                        .HasColumnName("touch_health_average")
                        .HasColumnType("double");

                    b.Property<int?>("TouchHealthMax")
                        .HasColumnName("touch_health_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TouchHealthMin")
                        .HasColumnName("touch_health_min")
                        .HasColumnType("int(11)");

                    b.Property<double?>("TouchHealthResultCaptureAverage")
                        .HasColumnName("touch_health_result_capture_average")
                        .HasColumnType("double");

                    b.Property<int?>("TouchHealthResultCaptureMax")
                        .HasColumnName("touch_health_result_capture_max")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TouchHealthResultCaptureMin")
                        .HasColumnName("touch_health_result_capture_min")
                        .HasColumnType("int(11)");

                    b.Property<int>("TouchesWithOverHundredHealth")
                        .HasColumnName("touches_with_over_hundred_health")
                        .HasColumnType("int(11)");

                    b.HasKey("IdStatsRound")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasName("fk_stats_StatsRounds_Games_idx");

                    b.HasIndex("FkIdMap")
                        .HasName("fk_stats_StatsRounds_Maps_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasName("fk_statround_player_idx");

                    b.HasIndex("FkIdRound")
                        .HasName("fk_statround_round_idx");

                    b.HasIndex("FkIdSeason")
                        .HasName("fk_stats_StatsRounds_Seasons_idx");

                    b.HasIndex("FkIdTeam")
                        .HasName("fk_stats_StatsRounds_Teams_idx");

                    b.HasIndex("FkIdWeek")
                        .HasName("fk_stats_StatsRounds_Weeks_idx");

                    b.HasIndex("IdStatsRound")
                        .IsUnique()
                        .HasName("id_stats_round_UNIQUE");

                    b.ToTable("statsrounds");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Teams", b =>
                {
                    b.Property<uint>("IdTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_team")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerCaptain")
                        .HasColumnName("fk_id_player_captain")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerFirstpick")
                        .HasColumnName("fk_id_player_firstpick")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerSecondpick")
                        .HasColumnName("fk_id_player_secondpick")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdPlayerThirdpick")
                        .HasColumnName("fk_id_player_thirdpick")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnName("fk_id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("TeamAbbreviation")
                        .IsRequired()
                        .HasColumnName("team_abbreviation")
                        .HasColumnType("varchar(16)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnName("team_name")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("IdTeam")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerCaptain")
                        .HasName("fk_stats_Teams_1_idx");

                    b.HasIndex("FkIdPlayerFirstpick")
                        .HasName("fk_stats_Teams_Players_2_idx");

                    b.HasIndex("FkIdPlayerSecondpick")
                        .HasName("fk_stats_Teams_Players_3_idx");

                    b.HasIndex("FkIdPlayerThirdpick")
                        .HasName("fk_stats_Teams_Players_4_idx");

                    b.HasIndex("FkIdSeason")
                        .HasName("fk_stats_Teams_Season_idx");

                    b.HasIndex("IdTeam")
                        .IsUnique()
                        .HasName("id_team_UNIQUE");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Done")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Weeks", b =>
                {
                    b.Property<uint>("IdWeek")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_week")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnName("fk_id_season")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("WeekNumber")
                        .HasColumnName("week_number")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnName("week_start_date")
                        .HasColumnType("date");

                    b.Property<string>("WeekType")
                        .IsRequired()
                        .HasColumnName("week_type")
                        .HasColumnType("enum('n','p','f')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("IdWeek")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdSeason")
                        .HasName("fk_stats_Weeks_Season_idx");

                    b.HasIndex("IdWeek")
                        .IsUnique()
                        .HasName("id_week_UNIQUE");

                    b.ToTable("weeks");
                });

            modelBuilder.Entity("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Demos", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkGame")
                        .WithMany("Demos")
                        .HasForeignKey("FkGameId")
                        .HasConstraintName("fk_demo_game")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkPlayer")
                        .WithMany("Demos")
                        .HasForeignKey("FkPlayerId")
                        .HasConstraintName("fk_demo_player")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GamePlayers", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_stats_GamePlayers_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("StatsTblGamePlayers")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_stats_GamePlayers_Maps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("fk_stats_GamePlayers_Players")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Seasons", "FkIdSeasonNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_GamePlayers_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdTeam")
                        .HasConstraintName("fk_stats_GamePlayers_Teams")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_stats_GamePlayers_Weeks")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", null)
                        .WithMany("GamePlayers")
                        .HasForeignKey("MapsIdMap");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GameTeamStats", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_stats_GameTeamStats_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_stats_GameTeamStats_Maps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Seasons", "FkIdSeasonNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_GameTeamStats_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdTeam")
                        .HasConstraintName("fk_stats_GameTeamStats_Teams")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_stats_GameTeamStats_Weeks")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Games", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("Games")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_stats_Games_Maps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Seasons", "FkIdSeasonNavigation")
                        .WithMany("Games")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_Games_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamBlueNavigation")
                        .WithMany("GamesFkIdTeamBlueNavigation")
                        .HasForeignKey("FkIdTeamBlue")
                        .HasConstraintName("fk_stats_Games_Teams_blue")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamRedNavigation")
                        .WithMany("GamesFkIdTeamRedNavigation")
                        .HasForeignKey("FkIdTeamRed")
                        .HasConstraintName("fk_stats_Games_Teams_red")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("Games")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_stats_Games_Weeks")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Maps", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.GameFiles", "FkIdFileNavigation")
                        .WithMany("StatsTblMaps")
                        .HasForeignKey("FkIdFile")
                        .HasConstraintName("fk_stats_Maps_Files")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.RoundPlayers", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("fk_stats_RoundPlayers_Players")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_stats_RoundPlayers_Rounds")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Rounds", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_stats_Rounds_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_stats_Rounds_Maps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Seasons", "FkIdSeasonNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_Rounds_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_stats_Rounds_Weeks")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Seasons", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.GameFiles", "FkIdFileNavigation")
                        .WithMany("StatsTblSeasons")
                        .HasForeignKey("FkIdWadFile")
                        .HasConstraintName("fk_stats_Seasons_Files")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsAccuracyData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsAccuracyDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_stats_StatsAccuracyData_PlayersAttacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsAccuracyDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_stats_StatsAccuracyData_PlayersTarget")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsAccuracyData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_stats_StatsAccuracyData_Rounds")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsAccuracyFlagOutData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsAccuracyFlagOutDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_stataccuracyflagout_player_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsAccuracyFlagOutDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_stataccuracyflagout_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsAccuracyFlagOutData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_stataccuracyflagout_round")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsDamageCarrierData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsDamageCarrierDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_statscarrierdamage_player_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsDamageCarrierDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_statscarrierdamage_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsDamageCarrierData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statscarrierdamage_round")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsDamageData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsDamageDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_statsdamage_player_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsDamageDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_statsdamage_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsDamageData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statsdamage_round")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsKillCarrierData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsKillCarrierDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_statskillcarrierplayer_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsKillCarrierDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_statskillcarrier_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsKillCarrierData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statskillcarrier_round")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsKillData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsKillDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_statskillplayer_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsKillDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_statskill_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsKillData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statskill_round")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsOverall", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithOne("StatsOverall")
                        .HasForeignKey("WorldDoomLeague.Domain.Entities.StatsOverall", "FkIdPlayer")
                        .HasConstraintName("fk_stats_StatsOverall_Players")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsOverallSeason", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("StatsOverallSeason")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("fk_stats_StatsOverallSeason_Players")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Seasons", "FkIdSeasonNavigation")
                        .WithMany("StatsOverallSeason")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_StatsOverallSeason_Seasons")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsPickupData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdActivatorPlayerNavigation")
                        .WithMany("StatsPickupData")
                        .HasForeignKey("FkIdActivatorPlayer")
                        .HasConstraintName("fk_statpickup_player")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsPickupData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statpickup_round")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsRounds", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_stats_tblStatsRounds_tblGames")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_stats_tblStatsRounds_tblMaps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("fk_stats_tblStatsRounds_tblPlayers")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_stats_tblStatsRounds_tblRounds")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Seasons", "FkIdSeasonNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_tblStatsRounds_tblSeasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_stats_tblStatsRounds_tblWeeks")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Teams", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerCaptainNavigation")
                        .WithMany("TeamsFkIdPlayerCaptainNavigation")
                        .HasForeignKey("FkIdPlayerCaptain")
                        .HasConstraintName("fk_stats_Teams_Players_1")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerFirstpickNavigation")
                        .WithMany("TeamsFkIdPlayerFirstpickNavigation")
                        .HasForeignKey("FkIdPlayerFirstpick")
                        .HasConstraintName("fk_stats_Teams_Players_2")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerSecondpickNavigation")
                        .WithMany("TeamsFkIdPlayerSecondpickNavigation")
                        .HasForeignKey("FkIdPlayerSecondpick")
                        .HasConstraintName("fk_stats_Teams_Players_3")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerThirdpickNavigation")
                        .WithMany("TeamsFkIdPlayerThirdpickNavigation")
                        .HasForeignKey("FkIdPlayerThirdpick")
                        .HasConstraintName("fk_stats_Teams_Players_4")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Seasons", "FkIdSeasonNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_Teams_Seasons")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Weeks", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Seasons", "FkIdSeasonNavigation")
                        .WithMany("Weeks")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_Weeks_Seasons")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
