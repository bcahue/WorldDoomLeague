// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldDoomLeague.Infrastructure.Persistence;

namespace WorldDoomLeague.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "e0480187-aab0-427c-aef6-1096a0a73a2c",
                            ConcurrencyStamp = "10e78324-e203-436a-a106-101316c9e637",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        },
                        new
                        {
                            Id = "356dec2b-0a53-4bd4-a600-b02915aab74f",
                            ConcurrencyStamp = "a9ef6a45-7f00-45da-ba38-fd04084be34f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "0142a9b3-c205-4e02-9129-3e0584a14838",
                            ConcurrencyStamp = "a3ad542f-eb8f-4cfb-a715-3b040f545eb3",
                            Name = "DemoAdmin",
                            NormalizedName = "DEMOADMIN"
                        },
                        new
                        {
                            Id = "bb5e7953-16b0-4db3-a1a8-95658eb3d7ec",
                            ConcurrencyStamp = "4f4d0d27-8bbe-4f1a-b661-e119a43f4b91",
                            Name = "NewsEditor",
                            NormalizedName = "NEWSEDITOR"
                        },
                        new
                        {
                            Id = "a3ba0f62-651b-44b9-b3c2-c1e241c5720a",
                            ConcurrencyStamp = "fc7819ef-868d-40a4-ba3a-af37024f37a3",
                            Name = "StatsRunner",
                            NormalizedName = "STATSRUNNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Demos", b =>
                {
                    b.Property<uint>("DemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("demo_id");

                    b.Property<uint>("FkGameId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_game_id");

                    b.Property<uint>("FkPlayerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_player_id");

                    b.Property<byte>("IsUploaded")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("is_uploaded");

                    b.Property<byte>("PlayerLostDemo")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("player_lost_demo");

                    b.HasKey("DemoId")
                        .HasName("PRIMARY");

                    b.HasIndex("DemoId")
                        .IsUnique()
                        .HasDatabaseName("demo_id_UNIQUE");

                    b.HasIndex("FkGameId")
                        .HasDatabaseName("fk_demo_game_idx");

                    b.HasIndex("FkPlayerId")
                        .HasDatabaseName("fk_demo_player_idx");

                    b.ToTable("demos");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Engine", b =>
                {
                    b.Property<uint>("IdEngine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("EngineName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("engine_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("EngineUrl")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("engine_url")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("IdEngine")
                        .HasName("PRIMARY");

                    b.HasIndex("IdEngine")
                        .IsUnique()
                        .HasDatabaseName("id_engine_UNIQUE");

                    b.ToTable("engine");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GameMaps", b =>
                {
                    b.Property<uint>("IdGameMap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_gamemap");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdMap")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_map");

                    b.HasKey("IdGameMap")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_GameMaps_Games_idx");

                    b.HasIndex("FkIdMap")
                        .HasDatabaseName("fk_GameMaps_Maps_idx");

                    b.HasIndex("IdGameMap")
                        .IsUnique()
                        .HasDatabaseName("id_file_UNIQUE");

                    b.ToTable("gamemaps");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GamePlayers", b =>
                {
                    b.Property<uint>("IdGameplayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_gameplayer");

                    b.Property<string>("DemoFilePath")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("demo_file_path")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("DemoNotTaken")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('y','n')")
                        .HasColumnName("demo_not_taken")
                        .HasDefaultValueSql("'n'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.HasKey("IdGameplayer")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_GamePlayers_Games_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasDatabaseName("fk_GamePlayers_Players_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_GamePlayers_Seasons_idx");

                    b.HasIndex("FkIdTeam")
                        .HasDatabaseName("fk_GamePlayers_Teams_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_GamePlayers_Weeks_idx");

                    b.HasIndex("IdGameplayer")
                        .IsUnique()
                        .HasDatabaseName("id_gameplayer_UNIQUE");

                    b.ToTable("gameplayers");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GameTeamStats", b =>
                {
                    b.Property<uint>("IdGameteamstats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_gameteamstats");

                    b.Property<uint>("CapturesAgainst")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("captures_against");

                    b.Property<uint>("CapturesFor")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("captures_for");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdOpponentTeam")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_opponentteam");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.Property<uint>("HighestMultiKill")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("highest_multi_kill");

                    b.Property<uint>("LongestSpree")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("longest_spree");

                    b.Property<uint>("Loss")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("loss");

                    b.Property<uint>("NumberRoundsPlayed")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("number_rounds_played");

                    b.Property<uint>("NumberTicsPlayed")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("number_tics_played");

                    b.Property<uint>("Points")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("points");

                    b.Property<string>("TeamColor")
                        .IsRequired()
                        .HasColumnType("enum('r','b')")
                        .HasColumnName("team_color")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<uint>("Tie")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("tie");

                    b.Property<uint>("TotalAssists")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_assists");

                    b.Property<uint>("TotalCaptures")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_captures");

                    b.Property<uint>("TotalCarrierDamage")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_carrier_damage");

                    b.Property<uint>("TotalCarrierKills")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_carrier_kills");

                    b.Property<uint>("TotalDamage")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_damage");

                    b.Property<uint>("TotalDamageWithFlag")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_damage_with_flag");

                    b.Property<uint>("TotalDeaths")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_deaths");

                    b.Property<uint>("TotalEnvironmentDeaths")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_environment_deaths");

                    b.Property<uint>("TotalFlagReturns")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_flag_returns");

                    b.Property<uint>("TotalKills")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_kills");

                    b.Property<uint>("TotalPickupCaptures")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_pickup_captures");

                    b.Property<uint>("TotalPickupTouches")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_pickup_touches");

                    b.Property<uint>("TotalPowerPickups")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_power_pickups");

                    b.Property<uint>("TotalTouches")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_touches");

                    b.Property<uint>("Win")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("win");

                    b.HasKey("IdGameteamstats")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_GameTeamStats_Games_idx");

                    b.HasIndex("FkIdOpponentTeam");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_GameTeamStats_Seasons_idx");

                    b.HasIndex("FkIdTeam")
                        .HasDatabaseName("fk_GameTeamStats_OpponentTeams_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_GameTeamStats_Weeks_idx");

                    b.HasIndex("IdGameteamstats")
                        .IsUnique()
                        .HasDatabaseName("id_gameteamstats_UNIQUE");

                    b.ToTable("gameteamstats");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Games", b =>
                {
                    b.Property<uint>("IdGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_game");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdTeamBlue")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team_blue");

                    b.Property<uint?>("FkIdTeamForfeit")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team_forfeit");

                    b.Property<uint>("FkIdTeamRed")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team_red");

                    b.Property<uint?>("FkIdTeamWinner")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team_winner");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.Property<DateTime?>("GameDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("game_datetime");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("enum('n','p','f')")
                        .HasColumnName("game_type")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("TeamForfeitColor")
                        .HasColumnType("enum('r','b')")
                        .HasColumnName("team_forfeit_color")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("TeamWinnerColor")
                        .HasColumnType("enum('r','b','t')")
                        .HasColumnName("team_winner_color")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("IdGame")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_stats_Games_Seasons_idx");

                    b.HasIndex("FkIdTeamBlue")
                        .HasDatabaseName("fk_stats_Games_Teams_blue_idx");

                    b.HasIndex("FkIdTeamRed")
                        .HasDatabaseName("fk_stats_Games_Teams_red_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_stats_Games_Weeks_idx");

                    b.HasIndex("IdGame")
                        .IsUnique()
                        .HasDatabaseName("id_games_UNIQUE");

                    b.ToTable("games");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.ImageFiles", b =>
                {
                    b.Property<uint>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_file");

                    b.Property<string>("Caption")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("caption")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("file_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<uint>("FileSize")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("file_size");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("upload_date");

                    b.HasKey("IdFile")
                        .HasName("PRIMARY");

                    b.HasIndex("IdFile")
                        .IsUnique()
                        .HasDatabaseName("id_file_UNIQUE");

                    b.ToTable("image_files");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.MapImages", b =>
                {
                    b.Property<uint>("IdMapImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_mapimage");

                    b.Property<uint>("FkIdImageFile")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_image_file");

                    b.Property<uint>("FkIdMap")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_map");

                    b.HasKey("IdMapImage")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdImageFile")
                        .HasDatabaseName("fk_MapImages_ImageFile_idx");

                    b.HasIndex("FkIdMap")
                        .HasDatabaseName("fk_MapImages_Map_idx");

                    b.HasIndex("IdMapImage")
                        .IsUnique()
                        .HasDatabaseName("id_map_image_UNIQUE");

                    b.ToTable("mapimages");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Maps", b =>
                {
                    b.Property<uint>("IdMap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_map");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("map_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<uint>("MapNumber")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("map_number");

                    b.Property<string>("MapPack")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("map_pack")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("IdMap")
                        .HasName("PRIMARY");

                    b.HasIndex("IdMap")
                        .IsUnique()
                        .HasDatabaseName("id_map_UNIQUE");

                    b.ToTable("maps");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Player", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("PlayerAlias")
                        .HasColumnType("varchar(32)")
                        .HasColumnName("player_alias")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("player_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_player_UNIQUE");

                    b.HasIndex("PlayerName")
                        .IsUnique()
                        .HasDatabaseName("player_name_UNIQUE");

                    b.ToTable("players");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.PlayerDraft", b =>
                {
                    b.Property<uint>("DraftRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("draftrecord_id");

                    b.Property<uint>("DraftNominationPosition")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("draft_nomination_position");

                    b.Property<uint>("FkIdPlayerNominated")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_nominated");

                    b.Property<uint>("FkIdPlayerNominating")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_nominating");

                    b.Property<uint>("FkIdPlayerSoldTo")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_sold_to");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdTeamSoldTo")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team_sold_to");

                    b.Property<uint>("SellPrice")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("sell_price");

                    b.Property<uint>("TeamDraftPosition")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("team_draft_position");

                    b.HasKey("DraftRecordId")
                        .HasName("PRIMARY");

                    b.HasIndex("DraftRecordId")
                        .IsUnique()
                        .HasDatabaseName("draftrecord_id_UNIQUE");

                    b.HasIndex("FkIdPlayerNominated")
                        .HasDatabaseName("fk_playerdraft_playernominated_idx");

                    b.HasIndex("FkIdPlayerNominating")
                        .HasDatabaseName("fk_playerdraft_playernominating_idx");

                    b.HasIndex("FkIdPlayerSoldTo")
                        .HasDatabaseName("fk_playerdraft_playersoldto_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_playerdraft_season_idx");

                    b.HasIndex("FkIdTeamSoldTo")
                        .HasDatabaseName("fk_playerdraft_teamsoldto_idx");

                    b.ToTable("playerdraft");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.PlayerGameRecord", b =>
                {
                    b.Property<uint>("GameRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_gamerecord");

                    b.Property<byte>("AsCaptain")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("ascaptain");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.Property<uint>("Loss")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("loss");

                    b.Property<uint>("Tie")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("tie");

                    b.Property<uint>("Win")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("win");

                    b.HasKey("GameRecordID")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_PlayerGameRecord_Game_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasDatabaseName("fk_PlayerGameRecord_Player_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_PlayerGameRecord_Season_idx");

                    b.HasIndex("FkIdTeam")
                        .HasDatabaseName("fk_PlayerGameRecord_Team_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_PlayerGameRecord_Week_idx");

                    b.HasIndex("GameRecordID")
                        .IsUnique()
                        .HasDatabaseName("id_gamerecord_UNIQUE");

                    b.ToTable("playergamerecord");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.PlayerRoundRecord", b =>
                {
                    b.Property<uint>("RoundRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_roundrecord");

                    b.Property<byte>("AsCaptain")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("ascaptain");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdMap")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_map");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdStatsRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_statsround");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.Property<uint>("Loss")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("loss");

                    b.Property<uint>("Tie")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("tie");

                    b.Property<uint>("Win")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("win");

                    b.HasKey("RoundRecordID")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_PlayerRoundRecord_Game_idx");

                    b.HasIndex("FkIdMap")
                        .HasDatabaseName("fk_PlayerRoundRecord_Map_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasDatabaseName("fk_PlayerRoundRecord_Player_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_PlayerRoundRecord_Rounds_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_PlayerRoundRecord_Season_idx");

                    b.HasIndex("FkIdStatsRound")
                        .IsUnique()
                        .HasDatabaseName("fk_PlayerRoundRecord_StatsRounds_idx");

                    b.HasIndex("FkIdTeam")
                        .HasDatabaseName("fk_PlayerRoundRecord_Team_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_PlayerRoundRecord_Week_idx");

                    b.HasIndex("RoundRecordID")
                        .IsUnique()
                        .HasDatabaseName("id_gameteamstats_UNIQUE");

                    b.ToTable("playerroundrecord");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.PlayerTransactions", b =>
                {
                    b.Property<uint>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("transaction_id");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint?>("FkIdTeamTradedFrom")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team_traded_from");

                    b.Property<uint?>("FkIdTeamTradedTo")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team_traded_to");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.Property<byte>("PlayerPromotedCaptain")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("player_promoted_captain");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayer")
                        .HasDatabaseName("fk_playertransaction_player_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_playertransaction_season_idx");

                    b.HasIndex("FkIdTeamTradedFrom")
                        .HasDatabaseName("fk_playertransaction_teamtradedfrom_idx");

                    b.HasIndex("FkIdTeamTradedTo")
                        .HasDatabaseName("fk_playertransaction_teamtradedto_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_playertransaction_week_idx");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasDatabaseName("transaction_id_UNIQUE");

                    b.ToTable("playertransactions");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.RoundFlagTouchCaptures", b =>
                {
                    b.Property<uint>("IdRoundflagtouchcapture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_roundflagtouchcapture");

                    b.Property<uint>("CaptureNumber")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("capture_number");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team");

                    b.Property<uint>("Gametic")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gametic");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("enum('r','b')")
                        .HasColumnName("team")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("IdRoundflagtouchcapture")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_stats_RoundFlagTouchCaptures_game_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasDatabaseName("fk_stats_RoundFlagTouchCaptures_player_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_stats_RoundFlagTouchCaptures_round_idx");

                    b.HasIndex("FkIdTeam")
                        .HasDatabaseName("fk_stats_RoundFlagTouchCaptures_team_idx");

                    b.HasIndex("IdRoundflagtouchcapture")
                        .IsUnique()
                        .HasDatabaseName("id_roundflagtouchcapture_UNIQUE");

                    b.ToTable("roundflagtouchcaptures");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.RoundPlayers", b =>
                {
                    b.Property<uint>("IdRoundplayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_roundplayer");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdMap")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_map");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.Property<uint>("RoundTicsDuration")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("round_tics_duration");

                    b.HasKey("IdRoundplayer")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_RoundPlayers_Game_idx");

                    b.HasIndex("FkIdMap")
                        .HasDatabaseName("fk_RoundPlayers_Map_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasDatabaseName("fk_RoundPlayers_Player_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_RoundPlayers_Round_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_RoundPlayers_Season_idx");

                    b.HasIndex("FkIdTeam")
                        .HasDatabaseName("fk_RoundPlayers_Team_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_RoundPlayers_Week_idx");

                    b.HasIndex("IdRoundplayer")
                        .IsUnique()
                        .HasDatabaseName("id_roundplayer_UNIQUE");

                    b.ToTable("roundplayers");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Rounds", b =>
                {
                    b.Property<uint>("IdRound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_round");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdMap")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_map");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.Property<DateTime?>("RoundDatetime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("round_datetime");

                    b.Property<uint?>("RoundNumber")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("round_number");

                    b.Property<ushort?>("RoundParseVersion")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("round_parse_version");

                    b.Property<uint?>("RoundTicsDuration")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("round_tics_duration");

                    b.Property<string>("RoundWinner")
                        .HasColumnType("enum('r','b','t')")
                        .HasColumnName("round_winner")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("IdRound")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_stats_Rounds_Games_idx");

                    b.HasIndex("FkIdMap")
                        .HasDatabaseName("fk_stats_Rounds_Maps_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_stats_Rounds_Seasons_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_stats_Rounds_Weeks_idx");

                    b.HasIndex("IdRound")
                        .IsUnique()
                        .HasDatabaseName("id_round_UNIQUE");

                    b.ToTable("rounds");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Season", b =>
                {
                    b.Property<uint>("IdSeason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_season");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime")
                        .HasColumnName("date_start");

                    b.Property<uint>("FkIdEngine")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_engine");

                    b.Property<int?>("FkIdTeamWinner")
                        .HasColumnType("int(11)")
                        .HasColumnName("fk_id_team_winner");

                    b.Property<uint>("FkIdWadFile")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_wad_file");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("season_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("IdSeason")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdEngine")
                        .HasDatabaseName("fk_Seasons_Engine_idx");

                    b.HasIndex("FkIdWadFile")
                        .HasDatabaseName("fk_Seasons_WadFile_idx");

                    b.HasIndex("IdSeason")
                        .IsUnique()
                        .HasDatabaseName("id_season_UNIQUE");

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsAccuracyData", b =>
                {
                    b.Property<uint>("IdStatsAccuracyData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_stats_accuracy_data");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_attacker");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<double>("HitMissRatio")
                        .HasColumnType("double unsigned")
                        .HasColumnName("hit_miss_ratio");

                    b.Property<double>("PinpointPercent")
                        .HasColumnType("double unsigned")
                        .HasColumnName("pinpoint_percent");

                    b.Property<double>("SpritePercent")
                        .HasColumnType("double unsigned")
                        .HasColumnName("sprite_percent");

                    b.Property<byte>("WeaponType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("weapon_type");

                    b.HasKey("IdStatsAccuracyData")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasDatabaseName("fk_stataccuracy_player_attacker_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_stataccuracy_round_idx");

                    b.HasIndex("IdStatsAccuracyData")
                        .IsUnique()
                        .HasDatabaseName("id_stats_accuracy_data_UNIQUE");

                    b.ToTable("statsaccuracydata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsAccuracyWithFlagData", b =>
                {
                    b.Property<uint>("IdStatsAccuracyFlagoutData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_stats_accuracy_flagout_data");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_attacker");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<double>("HitMissRatio")
                        .HasColumnType("double unsigned")
                        .HasColumnName("hit_miss_ratio");

                    b.Property<double>("PinpointPercent")
                        .HasColumnType("double unsigned")
                        .HasColumnName("pinpoint_percent");

                    b.Property<double>("SpritePercent")
                        .HasColumnType("double unsigned")
                        .HasColumnName("sprite_percent");

                    b.Property<byte>("WeaponType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("weapon_type");

                    b.HasKey("IdStatsAccuracyFlagoutData")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasDatabaseName("fk_stataccuracy_player_attacker_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_stataccuracy_round_idx");

                    b.HasIndex("IdStatsAccuracyFlagoutData")
                        .IsUnique()
                        .HasDatabaseName("id_stats_accuracy_data_UNIQUE");

                    b.ToTable("statsaccuracywithflagdata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsDamageData", b =>
                {
                    b.Property<uint>("IdStatsDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_stats_damage");

                    b.Property<uint>("DamageBlueArmor")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("damage_blue_armor");

                    b.Property<uint>("DamageGreenArmor")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("damage_green_armor");

                    b.Property<uint>("DamageHealth")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("damage_health");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_attacker");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_target");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<byte>("WeaponType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("weapon_type");

                    b.HasKey("IdStatsDamage")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasDatabaseName("fk_statsdamage_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasDatabaseName("fk_statsdamage_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_statsdamage_round_idx");

                    b.HasIndex("IdStatsDamage")
                        .IsUnique()
                        .HasDatabaseName("id_stats_damage_UNIQUE");

                    b.ToTable("statsdamagedata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsDamageWithFlagData", b =>
                {
                    b.Property<uint>("IdStatsCarrierDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_stats_carrier_damage");

                    b.Property<uint>("DamageBlueArmor")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("damage_blue_armor");

                    b.Property<uint>("DamageGreenArmor")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("damage_green_armor");

                    b.Property<uint>("DamageHealth")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("damage_health");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_attacker");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_target");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<byte>("WeaponType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("weapon_type");

                    b.HasKey("IdStatsCarrierDamage")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasDatabaseName("fk_statsdamage_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasDatabaseName("fk_statsdamage_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_statsdamage_round_idx");

                    b.HasIndex("IdStatsCarrierDamage")
                        .IsUnique()
                        .HasDatabaseName("id_stats_damage_UNIQUE");

                    b.ToTable("statsdamagewithflagdata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsKillCarrierData", b =>
                {
                    b.Property<uint>("IdStatsKillcarrier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_stats_killcarrier");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_attacker");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_target");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<uint>("TotalKills")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_kills");

                    b.Property<byte>("WeaponType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("weapon_type");

                    b.HasKey("IdStatsKillcarrier")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasDatabaseName("fk_statsdamage_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasDatabaseName("fk_statsdamage_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_statsdamage_round_idx");

                    b.HasIndex("IdStatsKillcarrier")
                        .IsUnique()
                        .HasDatabaseName("id_stats_damage_UNIQUE");

                    b.ToTable("statskillcarrierdata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsKillData", b =>
                {
                    b.Property<uint>("IdStatsKill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_stats_kill");

                    b.Property<uint>("FkIdPlayerAttacker")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_attacker");

                    b.Property<uint>("FkIdPlayerTarget")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_target");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<uint>("TotalKills")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("total_kills");

                    b.Property<byte>("WeaponType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("weapon_type");

                    b.HasKey("IdStatsKill")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerAttacker")
                        .HasDatabaseName("fk_statsdamage_player_attacker_idx");

                    b.HasIndex("FkIdPlayerTarget")
                        .HasDatabaseName("fk_statsdamage_player_target_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_statsdamage_round_idx");

                    b.HasIndex("IdStatsKill")
                        .IsUnique()
                        .HasDatabaseName("id_stats_damage_UNIQUE");

                    b.ToTable("statskilldata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsPickupData", b =>
                {
                    b.Property<uint>("IdStatPickup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_stat_pickup");

                    b.Property<uint>("FkIdActivatorPlayer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_activator_player");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<uint>("PickupAmount")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("pickup_amount");

                    b.Property<byte>("PickupType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("pickup_type");

                    b.HasKey("IdStatPickup")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdActivatorPlayer")
                        .HasDatabaseName("fk_statpickup_player_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_statpickup_round_idx");

                    b.HasIndex("IdStatPickup")
                        .IsUnique()
                        .HasDatabaseName("id_stat_pickup_UNIQUE");

                    b.ToTable("statspickupdata");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsRounds", b =>
                {
                    b.Property<uint>("IdStatsRound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_stats_round");

                    b.Property<int>("AccuracyCompleteHits")
                        .HasColumnType("int(10)")
                        .HasColumnName("accuracy_complete_hits");

                    b.Property<int>("AccuracyCompleteMisses")
                        .HasColumnType("int(11)")
                        .HasColumnName("accuracy_complete_misses");

                    b.Property<int>("AmountTeamKills")
                        .HasColumnType("int(11)")
                        .HasColumnName("amount_team_kills");

                    b.Property<double?>("CaptureBlueArmorAverage")
                        .HasColumnType("double")
                        .HasColumnName("capture_blue_armor_average");

                    b.Property<int?>("CaptureBlueArmorMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_blue_armor_max");

                    b.Property<int?>("CaptureBlueArmorMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_blue_armor_min");

                    b.Property<double?>("CaptureGreenArmorAverage")
                        .HasColumnType("double")
                        .HasColumnName("capture_green_armor_average");

                    b.Property<int?>("CaptureGreenArmorMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_green_armor_max");

                    b.Property<int?>("CaptureGreenArmorMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_green_armor_min");

                    b.Property<double?>("CaptureHealthAverage")
                        .HasColumnType("double")
                        .HasColumnName("capture_health_average");

                    b.Property<int?>("CaptureHealthMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_health_max");

                    b.Property<int?>("CaptureHealthMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_health_min");

                    b.Property<double?>("CaptureTicsAverage")
                        .HasColumnType("double")
                        .HasColumnName("capture_tics_average");

                    b.Property<int?>("CaptureTicsMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_tics_max");

                    b.Property<int?>("CaptureTicsMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_tics_min");

                    b.Property<int>("CaptureWithSuperPickups")
                        .HasColumnType("int(11)")
                        .HasColumnName("capture_with_super_pickups");

                    b.Property<int>("CarriersKilledWhileHoldingFlag")
                        .HasColumnType("int(11)")
                        .HasColumnName("carriers_killed_while_holding_flag");

                    b.Property<int?>("DamageOutputBetweenTouchCaptureAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("damage_output_between_touch_capture_average")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("DamageOutputBetweenTouchCaptureMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("damage_output_between_touch_capture_max")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("DamageOutputBetweenTouchCaptureMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("damage_output_between_touch_capture_min")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("FkIdGame")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_game");

                    b.Property<uint>("FkIdMap")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_map");

                    b.Property<uint>("FkIdPlayer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player");

                    b.Property<uint>("FkIdRound")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_round");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("FkIdTeam")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_team");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.Property<int>("HealthFromNonpowerPickups")
                        .HasColumnType("int(11)")
                        .HasColumnName("health_from_nonpower_pickups");

                    b.Property<int>("HighestKillsBeforeCapturing")
                        .HasColumnType("int(11)")
                        .HasColumnName("highest_kills_before_capturing");

                    b.Property<int>("HighestMultiFrags")
                        .HasColumnType("int(11)")
                        .HasColumnName("highest_multi_frags");

                    b.Property<int>("LongestSpree")
                        .HasColumnType("int(11)")
                        .HasColumnName("longest_spree");

                    b.Property<double?>("PickupCaptureTicsAverage")
                        .HasColumnType("double")
                        .HasColumnName("pickup_capture_tics_average");

                    b.Property<int?>("PickupCaptureTicsMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("pickup_capture_tics_max");

                    b.Property<int?>("PickupCaptureTicsMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("pickup_capture_tics_min");

                    b.Property<int>("PickupHealthGained")
                        .HasColumnType("int(11)")
                        .HasColumnName("pickup_health_gained");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("enum('r','b')")
                        .HasColumnName("team")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<int>("TotalAssists")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_assists");

                    b.Property<int>("TotalCaptures")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_captures");

                    b.Property<int>("TotalCarrierKills")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_carrier_kills");

                    b.Property<int>("TotalDamage")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_damage");

                    b.Property<int>("TotalDamageBlueArmor")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_damage_blue_armor");

                    b.Property<int>("TotalDamageCarrierTakenEnvironment")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_damage_carrier_taken_environment");

                    b.Property<int>("TotalDamageFlagCarrier")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_damage_flag_carrier");

                    b.Property<int>("TotalDamageGreenArmor")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_damage_green_armor");

                    b.Property<int>("TotalDamageTakenEnvironment")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_damage_taken_environment");

                    b.Property<int>("TotalDamageToFlagCarriersWhileHoldingFlag")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_damage_to_flag_carriers_while_holding_flag");

                    b.Property<int>("TotalDamageWithFlag")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_damage_with_flag");

                    b.Property<int>("TotalDeaths")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_deaths");

                    b.Property<int>("TotalEnvironmentCarrierDeaths")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_environment_carrier_deaths");

                    b.Property<int>("TotalEnvironmentDeaths")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_environment_deaths");

                    b.Property<int>("TotalFlagReturns")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_flag_returns");

                    b.Property<int>("TotalKills")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_kills");

                    b.Property<int>("TotalPickupCaptures")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_pickup_captures");

                    b.Property<int>("TotalPickupTouches")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_pickup_touches");

                    b.Property<int>("TotalPowerPickups")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_power_pickups");

                    b.Property<int>("TotalSuicides")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_suicides");

                    b.Property<int>("TotalSuicidesWithFlag")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_suicides_with_flag");

                    b.Property<int>("TotalTouches")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_touches");

                    b.Property<double?>("TouchBlueArmorAverage")
                        .HasColumnType("double")
                        .HasColumnName("touch_blue_armor_average");

                    b.Property<int?>("TouchBlueArmorMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("touch_blue_armor_max");

                    b.Property<int?>("TouchBlueArmorMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("touch_blue_armor_min");

                    b.Property<double?>("TouchGreenArmorAverage")
                        .HasColumnType("double")
                        .HasColumnName("touch_green_armor_average");

                    b.Property<int?>("TouchGreenArmorMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("touch_green_armor_max");

                    b.Property<int?>("TouchGreenArmorMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("touch_green_armor_min");

                    b.Property<double?>("TouchHealthAverage")
                        .HasColumnType("double")
                        .HasColumnName("touch_health_average");

                    b.Property<int?>("TouchHealthMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("touch_health_max");

                    b.Property<int?>("TouchHealthMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("touch_health_min");

                    b.Property<double?>("TouchHealthResultCaptureAverage")
                        .HasColumnType("double")
                        .HasColumnName("touch_health_result_capture_average");

                    b.Property<int?>("TouchHealthResultCaptureMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("touch_health_result_capture_max");

                    b.Property<int?>("TouchHealthResultCaptureMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("touch_health_result_capture_min");

                    b.Property<int>("TouchesWithOverHundredHealth")
                        .HasColumnType("int(11)")
                        .HasColumnName("touches_with_over_hundred_health");

                    b.HasKey("IdStatsRound")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdGame")
                        .HasDatabaseName("fk_StatsRounds_Games_idx");

                    b.HasIndex("FkIdMap")
                        .HasDatabaseName("fk_StatsRounds_Maps_idx");

                    b.HasIndex("FkIdPlayer")
                        .HasDatabaseName("fk_StatsRounds_Player_idx");

                    b.HasIndex("FkIdRound")
                        .HasDatabaseName("fk_StatsRounds_Round_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_StatsRounds_Seasons_idx");

                    b.HasIndex("FkIdTeam")
                        .HasDatabaseName("fk_StatsRounds_Teams_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_StatsRounds_Weeks_idx");

                    b.HasIndex("IdStatsRound")
                        .IsUnique()
                        .HasDatabaseName("id_stats_round_UNIQUE");

                    b.ToTable("statsrounds");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Teams", b =>
                {
                    b.Property<uint>("IdTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_team");

                    b.Property<uint?>("FkIdPlayerCaptain")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_captain");

                    b.Property<uint?>("FkIdPlayerFirstpick")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_firstpick");

                    b.Property<uint?>("FkIdPlayerSecondpick")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_secondpick");

                    b.Property<uint?>("FkIdPlayerThirdpick")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_player_thirdpick");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<string>("TeamAbbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasColumnName("team_abbreviation")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("team_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("IdTeam")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdPlayerCaptain")
                        .HasDatabaseName("fk_stats_Teams_1_idx");

                    b.HasIndex("FkIdPlayerFirstpick")
                        .HasDatabaseName("fk_stats_Teams_Players_2_idx");

                    b.HasIndex("FkIdPlayerSecondpick")
                        .HasDatabaseName("fk_stats_Teams_Players_3_idx");

                    b.HasIndex("FkIdPlayerThirdpick")
                        .HasDatabaseName("fk_stats_Teams_Players_4_idx");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_stats_Teams_Season_idx");

                    b.HasIndex("IdTeam")
                        .IsUnique()
                        .HasDatabaseName("id_team_UNIQUE");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.WadFiles", b =>
                {
                    b.Property<uint>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_file");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("file_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<uint>("FileSize")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("file_size");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("upload_date");

                    b.HasKey("IdFile")
                        .HasName("PRIMARY");

                    b.HasIndex("IdFile")
                        .IsUnique()
                        .HasDatabaseName("id_file_UNIQUE");

                    b.ToTable("wad_files");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.WeekMaps", b =>
                {
                    b.Property<uint>("IdWeekMap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_weekmap");

                    b.Property<uint>("FkIdMap")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_map");

                    b.Property<uint>("FkIdWeek")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_week");

                    b.HasKey("IdWeekMap")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdMap")
                        .HasDatabaseName("fk_WeekMaps_Maps_idx");

                    b.HasIndex("FkIdWeek")
                        .HasDatabaseName("fk_WeekMaps_Week_idx");

                    b.HasIndex("IdWeekMap")
                        .IsUnique()
                        .HasDatabaseName("id_weekmap_UNIQUE");

                    b.ToTable("weekmaps");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Weeks", b =>
                {
                    b.Property<uint>("IdWeek")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id_week");

                    b.Property<uint>("FkIdSeason")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fk_id_season");

                    b.Property<uint>("WeekNumber")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("week_number");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("date")
                        .HasColumnName("week_start_date");

                    b.Property<string>("WeekType")
                        .IsRequired()
                        .HasColumnType("enum('n','p','f')")
                        .HasColumnName("week_type")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("IdWeek")
                        .HasName("PRIMARY");

                    b.HasIndex("FkIdSeason")
                        .HasDatabaseName("fk_stats_Weeks_Season_idx");

                    b.HasIndex("IdWeek")
                        .IsUnique()
                        .HasDatabaseName("id_week_UNIQUE");

                    b.ToTable("weeks");
                });

            modelBuilder.Entity("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WorldDoomLeague.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Demos", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkGame")
                        .WithMany("Demos")
                        .HasForeignKey("FkGameId")
                        .HasConstraintName("fk_demo_game")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkPlayer")
                        .WithMany("Demos")
                        .HasForeignKey("FkPlayerId")
                        .HasConstraintName("fk_demo_player")
                        .IsRequired();

                    b.Navigation("FkGame");

                    b.Navigation("FkPlayer");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GameMaps", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("GameMaps")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_GameMaps_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("GameMaps")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_GameMaps_Maps")
                        .IsRequired();

                    b.Navigation("FkIdGameNavigation");

                    b.Navigation("FkIdMapNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GamePlayers", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_GamePlayers_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("fk_GamePlayers_Players")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_GamePlayers_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdTeam")
                        .HasConstraintName("fk_GamePlayers_Teams")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("GamePlayers")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_GamePlayers_Weeks")
                        .IsRequired();

                    b.Navigation("FkIdGameNavigation");

                    b.Navigation("FkIdPlayerNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdTeamNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.GameTeamStats", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_GameTeamStats_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdOpponentTeamNavigation")
                        .WithMany("GameTeamStatsOpponents")
                        .HasForeignKey("FkIdOpponentTeam")
                        .HasConstraintName("fk_GameTeamStats_OpponentTeams")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_GameTeamStats_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdTeam")
                        .HasConstraintName("fk_GameTeamStats_Teams")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("GameTeamStats")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_GameTeamStats_Weeks")
                        .IsRequired();

                    b.Navigation("FkIdGameNavigation");

                    b.Navigation("FkIdOpponentTeamNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdTeamNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Games", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("Games")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_Games_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamBlueNavigation")
                        .WithMany("GamesFkIdTeamBlueNavigation")
                        .HasForeignKey("FkIdTeamBlue")
                        .HasConstraintName("fk_stats_Games_Teams_blue")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamRedNavigation")
                        .WithMany("GamesFkIdTeamRedNavigation")
                        .HasForeignKey("FkIdTeamRed")
                        .HasConstraintName("fk_stats_Games_Teams_red")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("Games")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_stats_Games_Weeks")
                        .IsRequired();

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdTeamBlueNavigation");

                    b.Navigation("FkIdTeamRedNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.MapImages", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.ImageFiles", "FkIdImageFileNavigation")
                        .WithMany("MapImages")
                        .HasForeignKey("FkIdImageFile")
                        .HasConstraintName("fk_MapImages_Files")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("MapImages")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_MapImages_Maps")
                        .IsRequired();

                    b.Navigation("FkIdImageFileNavigation");

                    b.Navigation("FkIdMapNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.PlayerDraft", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNominatedNavigation")
                        .WithMany("DraftNominated")
                        .HasForeignKey("FkIdPlayerNominated")
                        .HasConstraintName("fk_Draft_Player_nominated")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNominatingNavigation")
                        .WithMany("DraftNominating")
                        .HasForeignKey("FkIdPlayerNominating")
                        .HasConstraintName("fk_Draft_Player_nominating")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerSoldToNavigation")
                        .WithMany("DraftSoldTo")
                        .HasForeignKey("FkIdPlayerSoldTo")
                        .HasConstraintName("fk_Draft_Player_sold_to")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("Draft")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_Draft_Season")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamSoldToNavigation")
                        .WithMany("DraftTeamSoldTo")
                        .HasForeignKey("FkIdTeamSoldTo")
                        .HasConstraintName("fk_Draft_Team_sold_to")
                        .IsRequired();

                    b.Navigation("FkIdPlayerNominatedNavigation");

                    b.Navigation("FkIdPlayerNominatingNavigation");

                    b.Navigation("FkIdPlayerSoldToNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdTeamSoldToNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.PlayerGameRecord", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("PlayerGameRecords")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("Fk_PlayerGameRecord_Game")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("PlayerGameRecords")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("Fk_PlayerGameRecord_Players")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("PlayerGameRecords")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("Fk_PlayerGameRecord_Season")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamNavigation")
                        .WithMany("PlayerGameRecords")
                        .HasForeignKey("FkIdTeam")
                        .HasConstraintName("Fk_PlayerGameRecord_Team")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("PlayerGameRecords")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("Fk_PlayerGameRecord_Week")
                        .IsRequired();

                    b.Navigation("FkIdGameNavigation");

                    b.Navigation("FkIdPlayerNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdTeamNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.PlayerRoundRecord", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("PlayerRoundRecords")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_PlayerRound_Game")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("PlayerRoundRecords")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_PlayerRound_Map")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("PlayerRoundRecords")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("fk_PlayerRound_Player")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("PlayerRoundRecords")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_PlayerRound_Round")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("PlayerRoundRecords")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_PlayerRound_Season")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.StatsRounds", "FkIdStatsRoundNavigation")
                        .WithOne("FkIdPlayerRoundRecordNavigation")
                        .HasForeignKey("WorldDoomLeague.Domain.Entities.PlayerRoundRecord", "FkIdStatsRound")
                        .HasConstraintName("fk_StatsRounds_PlayerRoundRecord")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamNavigation")
                        .WithMany("PlayerRoundRecords")
                        .HasForeignKey("FkIdTeam")
                        .HasConstraintName("fk_PlayerRound_Team")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("PlayerRoundRecords")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_PlayerRound_Week")
                        .IsRequired();

                    b.Navigation("FkIdGameNavigation");

                    b.Navigation("FkIdMapNavigation");

                    b.Navigation("FkIdPlayerNavigation");

                    b.Navigation("FkIdRoundNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdStatsRoundNavigation");

                    b.Navigation("FkIdTeamNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.PlayerTransactions", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("Fk_Transaction_Player")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("Fk_Transaction_Season")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamTradedFromNavigation")
                        .WithMany("TransactionTeamTradedFrom")
                        .HasForeignKey("FkIdTeamTradedFrom")
                        .HasConstraintName("fk_Transaction_Team_traded_from");

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamTradedToNavigation")
                        .WithMany("TransactionTeamTradedTo")
                        .HasForeignKey("FkIdTeamTradedTo")
                        .HasConstraintName("fk_Transaction_Team_traded_to");

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("Fk_Transaction_Week")
                        .IsRequired();

                    b.Navigation("FkIdPlayerNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdTeamTradedFromNavigation");

                    b.Navigation("FkIdTeamTradedToNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.RoundPlayers", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_RoundPlayers_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_RoundPlayers_Maps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("fk_RoundPlayers_Players")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_RoundPlayers_Round")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_RoundPlayers_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdTeam")
                        .HasConstraintName("fk_RoundPlayers_Teams")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("RoundPlayers")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_RoundPlayers_Weeks")
                        .IsRequired();

                    b.Navigation("FkIdGameNavigation");

                    b.Navigation("FkIdMapNavigation");

                    b.Navigation("FkIdPlayerNavigation");

                    b.Navigation("FkIdRoundNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdTeamNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Rounds", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_stats_Rounds_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_stats_Rounds_Maps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_Rounds_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_stats_Rounds_Weeks")
                        .IsRequired();

                    b.Navigation("FkIdGameNavigation");

                    b.Navigation("FkIdMapNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Season", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Engine", "FkIdEngineNavigation")
                        .WithMany("Seasons")
                        .HasForeignKey("FkIdEngine")
                        .HasConstraintName("fk_Seasons_Engine")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.WadFiles", "FkIdFileNavigation")
                        .WithMany("Seasons")
                        .HasForeignKey("FkIdWadFile")
                        .HasConstraintName("fk_Seasons_WadFiles")
                        .IsRequired();

                    b.Navigation("FkIdEngineNavigation");

                    b.Navigation("FkIdFileNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsAccuracyData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsAccuracyDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_stats_StatsAccuracyData_PlayersAttacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsAccuracyData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_stats_StatsAccuracyData_Rounds")
                        .IsRequired();

                    b.Navigation("FkIdPlayerAttackerNavigation");

                    b.Navigation("FkIdRoundNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsAccuracyWithFlagData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsAccuracyFlagOutDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_stataccuracyflagout_player_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsAccuracyFlagOutData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_stataccuracyflagout_round")
                        .IsRequired();

                    b.Navigation("FkIdPlayerAttackerNavigation");

                    b.Navigation("FkIdRoundNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsDamageData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsDamageDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_statsdamage_player_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsDamageDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_statsdamage_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsDamageData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statsdamage_round")
                        .IsRequired();

                    b.Navigation("FkIdPlayerAttackerNavigation");

                    b.Navigation("FkIdPlayerTargetNavigation");

                    b.Navigation("FkIdRoundNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsDamageWithFlagData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsDamageCarrierDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_statscarrierdamage_player_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsDamageCarrierDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_statscarrierdamage_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsDamageCarrierData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statscarrierdamage_round")
                        .IsRequired();

                    b.Navigation("FkIdPlayerAttackerNavigation");

                    b.Navigation("FkIdPlayerTargetNavigation");

                    b.Navigation("FkIdRoundNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsKillCarrierData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsKillCarrierDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_statskillcarrierplayer_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsKillCarrierDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_statskillcarrier_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsKillCarrierData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statskillcarrier_round")
                        .IsRequired();

                    b.Navigation("FkIdPlayerAttackerNavigation");

                    b.Navigation("FkIdPlayerTargetNavigation");

                    b.Navigation("FkIdRoundNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsKillData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerAttackerNavigation")
                        .WithMany("StatsKillDataFkIdPlayerAttackerNavigation")
                        .HasForeignKey("FkIdPlayerAttacker")
                        .HasConstraintName("fk_statskill_player_attacker")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerTargetNavigation")
                        .WithMany("StatsKillDataFkIdPlayerTargetNavigation")
                        .HasForeignKey("FkIdPlayerTarget")
                        .HasConstraintName("fk_statskill_player_target")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsKillData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statskill_round")
                        .IsRequired();

                    b.Navigation("FkIdPlayerAttackerNavigation");

                    b.Navigation("FkIdPlayerTargetNavigation");

                    b.Navigation("FkIdRoundNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsPickupData", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdActivatorPlayerNavigation")
                        .WithMany("StatsPickupData")
                        .HasForeignKey("FkIdActivatorPlayer")
                        .HasConstraintName("fk_statpickup_player")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsPickupData")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_statpickup_round")
                        .IsRequired();

                    b.Navigation("FkIdActivatorPlayerNavigation");

                    b.Navigation("FkIdRoundNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsRounds", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Games", "FkIdGameNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdGame")
                        .HasConstraintName("fk_StatsRounds_Games")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_StatsRounds_Maps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdPlayer")
                        .HasConstraintName("fk_StatsRounds_Players")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Rounds", "FkIdRoundNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdRound")
                        .HasConstraintName("fk_StatsRounds_Rounds")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_StatsRounds_Seasons")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Teams", "FkIdTeamNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdTeam")
                        .HasConstraintName("fk_StatsRounds_Teams")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("StatsRounds")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_StatsRounds_Weeks")
                        .IsRequired();

                    b.Navigation("FkIdGameNavigation");

                    b.Navigation("FkIdMapNavigation");

                    b.Navigation("FkIdPlayerNavigation");

                    b.Navigation("FkIdRoundNavigation");

                    b.Navigation("FkIdSeasonNavigation");

                    b.Navigation("FkIdTeamNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Teams", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerCaptainNavigation")
                        .WithMany("TeamsFkIdPlayerCaptainNavigation")
                        .HasForeignKey("FkIdPlayerCaptain")
                        .HasConstraintName("fk_stats_Teams_Players_1");

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerFirstpickNavigation")
                        .WithMany("TeamsFkIdPlayerFirstpickNavigation")
                        .HasForeignKey("FkIdPlayerFirstpick")
                        .HasConstraintName("fk_stats_Teams_Players_2");

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerSecondpickNavigation")
                        .WithMany("TeamsFkIdPlayerSecondpickNavigation")
                        .HasForeignKey("FkIdPlayerSecondpick")
                        .HasConstraintName("fk_stats_Teams_Players_3");

                    b.HasOne("WorldDoomLeague.Domain.Entities.Player", "FkIdPlayerThirdpickNavigation")
                        .WithMany("TeamsFkIdPlayerThirdpickNavigation")
                        .HasForeignKey("FkIdPlayerThirdpick")
                        .HasConstraintName("fk_stats_Teams_Players_4");

                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_Teams_Seasons")
                        .IsRequired();

                    b.Navigation("FkIdPlayerCaptainNavigation");

                    b.Navigation("FkIdPlayerFirstpickNavigation");

                    b.Navigation("FkIdPlayerSecondpickNavigation");

                    b.Navigation("FkIdPlayerThirdpickNavigation");

                    b.Navigation("FkIdSeasonNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.WeekMaps", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Maps", "FkIdMapNavigation")
                        .WithMany("WeekMaps")
                        .HasForeignKey("FkIdMap")
                        .HasConstraintName("fk_WeekMaps_Maps")
                        .IsRequired();

                    b.HasOne("WorldDoomLeague.Domain.Entities.Weeks", "FkIdWeekNavigation")
                        .WithMany("WeekMaps")
                        .HasForeignKey("FkIdWeek")
                        .HasConstraintName("fk_WeekMaps_Week")
                        .IsRequired();

                    b.Navigation("FkIdMapNavigation");

                    b.Navigation("FkIdWeekNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Weeks", b =>
                {
                    b.HasOne("WorldDoomLeague.Domain.Entities.Season", "FkIdSeasonNavigation")
                        .WithMany("Weeks")
                        .HasForeignKey("FkIdSeason")
                        .HasConstraintName("fk_stats_Weeks_Seasons")
                        .IsRequired();

                    b.Navigation("FkIdSeasonNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Engine", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Games", b =>
                {
                    b.Navigation("Demos");

                    b.Navigation("GameMaps");

                    b.Navigation("GamePlayers");

                    b.Navigation("GameTeamStats");

                    b.Navigation("PlayerGameRecords");

                    b.Navigation("PlayerRoundRecords");

                    b.Navigation("RoundPlayers");

                    b.Navigation("Rounds");

                    b.Navigation("StatsRounds");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.ImageFiles", b =>
                {
                    b.Navigation("MapImages");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Maps", b =>
                {
                    b.Navigation("GameMaps");

                    b.Navigation("MapImages");

                    b.Navigation("PlayerRoundRecords");

                    b.Navigation("RoundPlayers");

                    b.Navigation("Rounds");

                    b.Navigation("StatsRounds");

                    b.Navigation("WeekMaps");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Player", b =>
                {
                    b.Navigation("Demos");

                    b.Navigation("DraftNominated");

                    b.Navigation("DraftNominating");

                    b.Navigation("DraftSoldTo");

                    b.Navigation("GamePlayers");

                    b.Navigation("PlayerGameRecords");

                    b.Navigation("PlayerRoundRecords");

                    b.Navigation("RoundPlayers");

                    b.Navigation("StatsAccuracyDataFkIdPlayerAttackerNavigation");

                    b.Navigation("StatsAccuracyFlagOutDataFkIdPlayerAttackerNavigation");

                    b.Navigation("StatsDamageCarrierDataFkIdPlayerAttackerNavigation");

                    b.Navigation("StatsDamageCarrierDataFkIdPlayerTargetNavigation");

                    b.Navigation("StatsDamageDataFkIdPlayerAttackerNavigation");

                    b.Navigation("StatsDamageDataFkIdPlayerTargetNavigation");

                    b.Navigation("StatsKillCarrierDataFkIdPlayerAttackerNavigation");

                    b.Navigation("StatsKillCarrierDataFkIdPlayerTargetNavigation");

                    b.Navigation("StatsKillDataFkIdPlayerAttackerNavigation");

                    b.Navigation("StatsKillDataFkIdPlayerTargetNavigation");

                    b.Navigation("StatsPickupData");

                    b.Navigation("StatsRounds");

                    b.Navigation("TeamsFkIdPlayerCaptainNavigation");

                    b.Navigation("TeamsFkIdPlayerFirstpickNavigation");

                    b.Navigation("TeamsFkIdPlayerSecondpickNavigation");

                    b.Navigation("TeamsFkIdPlayerThirdpickNavigation");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Rounds", b =>
                {
                    b.Navigation("PlayerRoundRecords");

                    b.Navigation("RoundPlayers");

                    b.Navigation("StatsAccuracyData");

                    b.Navigation("StatsAccuracyFlagOutData");

                    b.Navigation("StatsDamageCarrierData");

                    b.Navigation("StatsDamageData");

                    b.Navigation("StatsKillCarrierData");

                    b.Navigation("StatsKillData");

                    b.Navigation("StatsPickupData");

                    b.Navigation("StatsRounds");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Season", b =>
                {
                    b.Navigation("Draft");

                    b.Navigation("GamePlayers");

                    b.Navigation("Games");

                    b.Navigation("GameTeamStats");

                    b.Navigation("PlayerGameRecords");

                    b.Navigation("PlayerRoundRecords");

                    b.Navigation("RoundPlayers");

                    b.Navigation("Rounds");

                    b.Navigation("StatsRounds");

                    b.Navigation("Teams");

                    b.Navigation("Transactions");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.StatsRounds", b =>
                {
                    b.Navigation("FkIdPlayerRoundRecordNavigation");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Teams", b =>
                {
                    b.Navigation("DraftTeamSoldTo");

                    b.Navigation("GamePlayers");

                    b.Navigation("GamesFkIdTeamBlueNavigation");

                    b.Navigation("GamesFkIdTeamRedNavigation");

                    b.Navigation("GameTeamStats");

                    b.Navigation("GameTeamStatsOpponents");

                    b.Navigation("PlayerGameRecords");

                    b.Navigation("PlayerRoundRecords");

                    b.Navigation("RoundPlayers");

                    b.Navigation("StatsRounds");

                    b.Navigation("TransactionTeamTradedFrom");

                    b.Navigation("TransactionTeamTradedTo");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.WadFiles", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("WorldDoomLeague.Domain.Entities.Weeks", b =>
                {
                    b.Navigation("GamePlayers");

                    b.Navigation("Games");

                    b.Navigation("GameTeamStats");

                    b.Navigation("PlayerGameRecords");

                    b.Navigation("PlayerRoundRecords");

                    b.Navigation("RoundPlayers");

                    b.Navigation("Rounds");

                    b.Navigation("StatsRounds");

                    b.Navigation("Transactions");

                    b.Navigation("WeekMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
